{"version":3,"sources":["components/homepage.js","components/shoppingcart.js","redux/store/main.js","components/modules/store/storemain.js","components/modules/store/storesecondary.js","components/modules/store/storepicker.js","components/store.js","App.js","redux/configureStore.js","index.js"],"names":["HomePage","ShoppingCart","GET_CATEGORIES","UPD_STORE","initialState","Storemain","dispatch","useDispatch","productData","useSelector","state","storemainReducer","useEffect","type","payload","map","data","nombre","Storesecondary","Storepicker","Store","id","App","className","to","path","reducer","combineReducers","action","actionPayload","console","log","composedEnhancer","compose","applyMiddleware","store","next","fetch","headers","then","response","json","logger","createStore","undefined","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uLAOeA,EALE,kBACf,6CCIaC,EALM,kBACnB,iDCFIC,EAAiB,kCACjBC,EAAY,6BAEZC,EAAe,GCiBNC,EAjBG,WAChB,IAAMC,EAAWC,cACXC,EAAcC,aAAY,SAACC,GAAD,OAAWA,EAAMC,oBAMjD,OAJAC,qBAAU,WACRN,EDHgC,CAClCO,KAAMX,EACNY,QCCyB,OACtB,IAGD,gCACGN,EAAYO,KAAI,SAACC,GAAD,OACf,8BAAwBA,EAAKC,QAAnBD,EAAKC,WAEjB,gDCVSC,EALQ,kBACrB,kDCIaC,EALK,kBAClB,+CCUaC,EARD,kBACZ,sBAAKC,GAAG,WAAR,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCoCWC,EAlCH,kBACV,eAAC,IAAD,WACE,qBAAKC,UAAU,QAAf,SACE,6CAEF,sBAAKA,UAAU,SAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,qBAAIA,UAAU,UAAd,UACE,6BACE,cAAC,IAAD,CAAMC,GAAG,QAAT,oBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,SAAT,qBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,QAAT,yBAIN,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,QAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,SAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,QAAZ,SACE,cAAC,EAAD,gB,wBChCJC,EAAUC,YAAgB,CAC9BhB,iBNQuB,WAAmC,IAAlCD,EAAiC,uDAAzBN,EAAcwB,EAAW,uCACnDC,EAAgBD,EAAOd,QAC7B,OAAQc,EAAOf,MACb,KAAKX,EACH,OAAOQ,EACT,KAAKP,EAEH,OADA2B,QAAQC,IAAIF,GACLA,EACT,QACE,OAAOnB,MMdPsB,EAAmBC,YACvBC,aNiBmC,SAACC,GAAD,OAAW,SAACC,GAAD,OAAU,SAACR,GACrDA,EAAOf,OAASX,GAClBmC,MAAM,iBAAkB,CACtBC,QAAS,CACP,eAAgB,qCAEjBC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GAAD,OAAUN,EAAM7B,SAzBa,CACvCO,KAAMV,EACNW,QAuBsD2B,OAEtDL,EAAKR,QMzBLM,YAAgBQ,MASHP,EANDQ,YACZjB,OACAkB,EACAZ,GCZFa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUZ,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJa,SAASC,eAAe,W","file":"static/js/main.bf65c02b.chunk.js","sourcesContent":["import React from 'react';\n\nconst HomePage = () => (\n  <div>\n    Home Page\n  </div>\n);\nexport default HomePage;\n","import React from 'react';\n\nconst ShoppingCart = () => (\n  <div>\n    Shopping Cart\n  </div>\n);\nexport default ShoppingCart;\n","// ---------------- paths --------------------\nconst GET_CATEGORIES = 'REDUX/STORE/MAIN/GET_CATEGORIES';\nconst UPD_STORE = 'REDUX/STORE/MAIN/UPD_STORE';\n// ---------------- Initial state ------------\nconst initialState = [];\n// ---------------- Actions ------------------\nconst getCategories = (payload) => ({\n  type: GET_CATEGORIES,\n  payload,\n});\nconst updateStateWithAPI = (payload) => ({\n  type: UPD_STORE,\n  payload,\n});\n// ---------------- Reducer ------------------\nconst storemainReducer = (state = initialState, action) => {\n  const actionPayload = action.payload;\n  switch (action.type) {\n    case GET_CATEGORIES:\n      return state;\n    case UPD_STORE:\n      console.log(actionPayload);\n      return actionPayload;\n    default:\n      return state;\n  }\n};\n// ---------------- Middlewares --------------\nconst getProductsFromAPIMiddleware = (store) => (next) => (action) => {\n  if (action.type === GET_CATEGORIES) {\n    fetch('/getCategories', {\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n    }).then((response) => response.json())\n      .then((json) => store.dispatch(updateStateWithAPI(json)));\n  }\n  next(action);\n};\n// ---------------- Exports --------------\nexport {\n  storemainReducer,\n  getCategories,\n  updateStateWithAPI,\n  getProductsFromAPIMiddleware,\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCategories } from '../../../redux/store/main';\n\nconst Storemain = () => {\n  const dispatch = useDispatch();\n  const productData = useSelector((state) => state.storemainReducer);\n\n  useEffect(() => {\n    dispatch(getCategories([]));\n  }, []);\n\n  return (\n    <div>\n      {productData.map((data) => (\n        <div key={data.nombre}>{data.nombre}</div>\n      ))}\n      <div>Storemain</div>\n    </div>\n  );\n};\nexport default Storemain;\n","import React from 'react';\n\nconst Storesecondary = () => (\n  <div>\n    Storesecondary\n  </div>\n);\nexport default Storesecondary;\n","import React from 'react';\n\nconst Storepicker = () => (\n  <div>\n    Storepicker\n  </div>\n);\nexport default Storepicker;\n","import React from 'react';\nimport Storemain from './modules/store/storemain';\nimport Storesecondary from './modules/store/storesecondary';\nimport Storepicker from './modules/store/storepicker';\n\nconst Store = () => (\n  <div id=\"Products\">\n    <Storemain />\n    <Storesecondary />\n    <Storepicker />\n  </div>\n);\n\nexport default Store;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom';\nimport HomePage from './components/homepage';\nimport ShoppingCart from './components/shoppingcart';\nimport Store from './components/store';\n\nconst App = () => (\n  <Router>\n    <div className=\"hello\">\n      <h1>Makit App</h1>\n    </div>\n    <div className=\"switch\">\n      <div className=\"switch_header\">\n        <ul className=\"nav-bar\">\n          <li>\n            <Link to=\"/home\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/store\">Store</Link>\n          </li>\n          <li>\n            <Link to=\"/shop\">Shop</Link>\n          </li>\n        </ul>\n      </div>\n      <Switch>\n        <Route path=\"/home\">\n          <HomePage />\n        </Route>\n        <Route path=\"/store\">\n          <Store />\n        </Route>\n        <Route path=\"/shop\">\n          <ShoppingCart />\n        </Route>\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","import {\n  createStore, compose, combineReducers, applyMiddleware,\n} from 'redux';\nimport logger from 'redux-logger';\nimport { storemainReducer, getProductsFromAPIMiddleware } from './store/main';\n\nconst reducer = combineReducers({\n  storemainReducer,\n});\n\nconst composedEnhancer = compose(\n  applyMiddleware(getProductsFromAPIMiddleware),\n  applyMiddleware(logger),\n);\n\nconst store = createStore(\n  reducer,\n  undefined,\n  composedEnhancer,\n);\n\nexport default store;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './redux/configureStore';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}